import os
import re
import logging
import time
import random
from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
from django.db import transaction
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
from django.views.decorators.csrf import ensure_csrf_cookie
from openai import OpenAI, RateLimitError, APIConnectionError, APIError
from .models import ProgressLog
from .serializers import (
    ProgressLogSerializer,
    RegisterSerializer,
    UserSerializer,
)

# Setup logging
logger = logging.getLogger(__name__)

# =========================
# OpenAI (DeepInfra) client v·ªõi c·∫•u h√¨nh t·ª´ test th√†nh c√¥ng
# =========================
DEEPINFRA_API_KEY = os.environ.get("DEEPINFRA_API_KEY")

# Log ƒë·ªÉ debug
logger.info(f"DEEPINFRA_API_KEY exists: {bool(DEEPINFRA_API_KEY)}")
if DEEPINFRA_API_KEY:
    logger.info(f"API Key length: {len(DEEPINFRA_API_KEY)}")
    logger.info(f"API Key first 10 chars: {DEEPINFRA_API_KEY[:10]}...")

if not DEEPINFRA_API_KEY:
    logger.error("DEEPINFRA_API_KEY environment variable is not set!")
    if os.environ.get("DJANGO_DEBUG", "false").lower() == "true":
        logger.warning("Using default API key for development only!")
        DEEPINFRA_API_KEY = "your_development_key_here"
    else:
        raise ValueError("DEEPINFRA_API_KEY environment variable is required in production")

try:
    # C·∫•u h√¨nh gi·ªëng test th√†nh c√¥ng trong Colab
    openai_client = OpenAI(
        api_key=DEEPINFRA_API_KEY,
        base_url="https://api.deepinfra.com/v1/openai",
        timeout=60.0,  # Gi·ªëng Colab test
    )
    logger.info("OpenAI client initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize OpenAI client: {e}")
    raise

# =========================
# Helpers v·ªõi retry logic t·ª´ Colab test
# =========================
def normalize_status(value: str) -> str:
    """Normalize arbitrary status strings into 'pending' or 'done'."""
    if not value:
        return "pending"
    v = value.strip().lower()
    return "done" if v == "done" else "pending"

def call_with_backoff(messages, model="openchat/openchat_3.5", 
                      max_tokens=1400, temperature=0.6, max_attempts=5):
    """
    Function t·ª´ Colab test - ƒë√£ ho·∫°t ƒë·ªông th√†nh c√¥ng
    """
    for attempt in range(1, max_attempts + 1):
        try:
            t0 = time.perf_counter()
            resp = openai_client.chat.completions.create(
                model=model,
                messages=messages,
                max_tokens=max_tokens,
                temperature=temperature,
                timeout=60.0,  # Timeout gi·ªëng Colab test
            )
            elapsed = time.perf_counter() - t0
            logger.info(f"‚úÖ API call completed in {elapsed:.2f}s (attempt {attempt})")
            return resp
        except RateLimitError as e:
            # Model busy/quota/rate limit ‚Üí exponential backoff + jitter
            sleep = min(60, 2 ** attempt) + random.uniform(0, 0.5)
            logger.warning(f"‚è≥ Rate limit (attempt {attempt}) ‚Üí retry in {sleep:.1f}s")
            if attempt < max_attempts:
                time.sleep(sleep)
            else:
                raise
        except APIConnectionError as e:
            sleep = min(20, 2 ** attempt) + random.uniform(0, 0.5)
            logger.warning(f"üåê Network issue (attempt {attempt}) ‚Üí retry in {sleep:.1f}s")
            if attempt < max_attempts:
                time.sleep(sleep)
            else:
                raise
        except APIError as e:
            # 5xx service errors ‚Äì retry 1-2 l·∫ßn
            if attempt >= max_attempts:
                raise
            sleep = min(20, 2 ** attempt) + random.uniform(0, 0.5)
            logger.warning(f"üõ†Ô∏è Service error (attempt {attempt}) ‚Üí retry in {sleep:.1f}s")
            time.sleep(sleep)
    
    raise RuntimeError("Failed after all retry attempts")

def generate_fallback_plan(class_level, subject, study_time, goal):
    """
    Enhanced fallback plan cho t·ª´ng m√¥n h·ªçc c·ª• th·ªÉ
    """
    logger.info("Generating enhanced fallback learning plan")
    plan = {}
    
    # Ch·ªß ƒë·ªÅ chi ti·∫øt theo m√¥n h·ªçc
    if "to√°n" in subject.lower():
        topics = [
            "√în t·∫≠p ki·∫øn th·ª©c c∆° b·∫£n v√† c√¥ng th·ª©c quan tr·ªçng",
            "H·ªçc ƒë·ªãnh l√Ω m·ªõi v√† c√°ch ch·ª©ng minh",
            "Th·ª±c h√†nh b√†i t·∫≠p tr·∫Øc nghi·ªám c∆° b·∫£n", 
            "Gi·∫£i b√†i t·∫≠p t·ª± lu·∫≠n d·∫°ng c∆° b·∫£n",
            "Th·ª±c h√†nh b√†i t·∫≠p n√¢ng cao v√† kh√≥",
            "√în t·∫≠p chuy√™n s√¢u c√°c d·∫°ng b√†i hay g·∫∑p",
            "Ki·ªÉm tra v√† ƒë√°nh gi√° k·∫øt qu·∫£ h·ªçc t·∫≠p"
        ]
        tools = "GeoGebra, Photomath, Khan Academy, Wolfram Alpha"
    elif "tin h·ªçc" in subject.lower() or "c√¥ng ngh·ªá" in subject.lower():
        topics = [
            "L√†m quen v·ªõi ng√¥n ng·ªØ l·∫≠p tr√¨nh c∆° b·∫£n",
            "H·ªçc c√∫ ph√°p v√† c·∫•u tr√∫c d·ªØ li·ªáu", 
            "Th·ª±c h√†nh thu·∫≠t to√°n s·∫Øp x·∫øp v√† t√¨m ki·∫øm",
            "L·∫≠p tr√¨nh gi·∫£i quy·∫øt b√†i to√°n th·ª±c t·∫ø",
            "H·ªçc v·ªÅ c∆° s·ªü d·ªØ li·ªáu v√† SQL",
            "Th·ª±c h√†nh project nh·ªè v√† debugging",
            "T·ªïng h·ª£p ki·∫øn th·ª©c v√† l√†m ƒë·ªì √°n"
        ]
        tools = "Visual Studio Code, Scratch, Python IDLE, GitHub"
    elif "vƒÉn" in subject.lower():
        topics = [
            "√în t·∫≠p l√Ω thuy·∫øt vƒÉn h·ªçc v√† t√°c gi·∫£",
            "ƒê·ªçc hi·ªÉu v√† ph√¢n t√≠ch vƒÉn b·∫£n",
            "Luy·ªán vi·∫øt b√†i vƒÉn ngh·ªã lu·∫≠n",
            "Th·ª±c h√†nh l√†m b√†i thi tr·∫Øc nghi·ªám",
            "Vi·∫øt b√†i vƒÉn t·ª± lu·∫≠n theo ƒë·ªÅ c∆∞∆°ng",
            "√în t·∫≠p to√†n b·ªô ch∆∞∆°ng tr√¨nh v√† ƒë·ªÅ thi",
            "Ki·ªÉm tra v√† r√∫t kinh nghi·ªám"
        ]
        tools = "S√°ch gi√°o khoa, VƒÉn m·∫´u online, Quizlet"
    else:
        # Default cho c√°c m√¥n kh√°c
        topics = [
            "√în t·∫≠p ki·∫øn th·ª©c n·ªÅn t·∫£ng c∆° b·∫£n",
            "H·ªçc l√Ω thuy·∫øt m·ªõi theo ch∆∞∆°ng tr√¨nh",
            "Th·ª±c h√†nh b√†i t·∫≠p √°p d·ª•ng tr·ª±c ti·∫øp", 
            "Gi·∫£i b√†i t·∫≠p v·∫≠n d·ª•ng v√† t·ªïng h·ª£p",
            "√în t·∫≠p v√† l√†m ƒë·ªÅ thi th·ª≠",
            "T·ªïng h·ª£p ki·∫øn th·ª©c to√†n ch∆∞∆°ng tr√¨nh",
            "ƒê√°nh gi√° v√† ho√†n thi·ªán ki·∫øn th·ª©c"
        ]
        tools = "Google Classroom, YouTube, Khan Academy"
    
    for day in range(1, 29):
        if day == 28:
            task = f"Ng√†y {day}: √îN T·∫¨P & KI·ªÇM TRA T·ªîNG H·ª¢P - {goal} | T·ª™ KH√ìA T√åM KI·∫æM: {subject} √¥n t·∫≠p t·ªïng h·ª£p l·ªõp {class_level} thi cu·ªëi k·ª≥ | B√†i t·∫≠p t·ª± luy·ªán: L√†m ƒë·ªÅ thi th·ª≠ ho√†n ch·ªânh trong 120 ph√∫t | C√îNG C·ª§ H·ªñ TR·ª¢: {tools}, Google Forms"
        else:
            week = (day - 1) // 7 + 1
            topic_idx = (day - 1) % len(topics)
            topic = topics[topic_idx]
            
            task = f"Ng√†y {day}: {topic} - {subject} l·ªõp {class_level} | T·ª™ KH√ìA T√åM KI·∫æM: {subject} l·ªõp {class_level} {topic.lower()} | B√†i t·∫≠p t·ª± luy·ªán: Th·ª±c h√†nh {study_time} v·ªõi {topic.lower()} | C√îNG C·ª§ H·ªñ TR·ª¢: {tools}"
        
        plan[day] = task
    
    return plan

# =========================================
# Generate learning path v·ªõi timeout t·ª´ Colab test
# =========================================
@api_view(["POST"])
@permission_classes([IsAuthenticated])
def generate_learning_path(request):
    """
    Optimized version d·ª±a tr√™n test th√†nh c√¥ng trong Colab
    """
    try:
        # Log request data
        logger.info(f"generate_learning_path called by user: {request.user.username}")
        logger.info(f"Request data: {request.data}")
        
        data = request.data
        class_level = (data.get("class_level") or "").strip()
        subject = (data.get("subject") or "").strip()
        study_time = (data.get("study_time") or "").strip()
        goal = (data.get("goal") or "").strip()
        
        if not all([class_level, subject, study_time, goal]):
            logger.warning("Missing required fields")
            return Response(
                {"error": "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Prompt gi·ªëng nh∆∞ trong Colab test th√†nh c√¥ng
        messages = [
            {
                "role": "system", 
                "content": "B·∫°n l√† chuy√™n gia l·∫≠p k·∫ø ho·∫°ch t·ª± h·ªçc, tr·∫£ l·ªùi 100% ti·∫øng Vi·ªát."
            },
            {
                "role": "user", 
                "content": f"""
H√£y l·∫≠p k·∫ø ho·∫°ch t·ª± h·ªçc 4 tu·∫ßn (28 ng√†y) cho h·ªçc sinh l·ªõp {class_level}, nh·∫±m c·∫£i thi·ªán m√¥n {subject}.
H·ªçc sinh h·ªçc {study_time} m·ªói ng√†y. M·ª•c ti√™u: {goal}.
Y√äU C·∫¶U:
- Xu·∫•t ra CH√çNH X√ÅC 28 d√≤ng (Ng√†y 1 ‚Üí Ng√†y 28), m·ªói d√≤ng ‚â§ 120 k√Ω t·ª±, kh√¥ng d√≤ng tr·ªëng.
- N·ªôi dung theo CT GDPT 2018. Ng√†y 28 = √îN T·∫¨P & KI·ªÇM TRA T·ªîNG H·ª¢P.
- KH√îNG ti√™u ƒë·ªÅ, KH√îNG markdown, KH√îNG code block.
ƒê·ªãnh d·∫°ng:
Ng√†y N: <n·ªôi dung> | T·ª™ KH√ìA T√åM KI·∫æM: <t·ª´ kh√≥a> | B√†i t·∫≠p t·ª± luy·ªán: <g·ª£i √Ω> | C√îNG C·ª§ H·ªñ TR·ª¢: <·ª©ng d·ª•ng li√™n quan ƒë·∫øn m√¥n {subject}>
Ch·ªâ in ƒë√∫ng 28 d√≤ng theo m·∫´u tr√™n, kh√¥ng th√™m g√¨ kh√°c.
""".strip()
            }
        ]
        
        # G·ªçi API v·ªõi c·∫•u h√¨nh t·ª´ Colab test
        logger.info("Calling DeepInfra API with proven configuration...")
        
        plan = {}
        ai_success = False
        api_response_time = 0
        
        try:
            # S·ª≠ d·ª•ng ThreadPoolExecutor v·ªõi timeout l·ªõn h∆°n
            with ThreadPoolExecutor(max_workers=1) as executor:
                start_time = time.time()
                # TƒÉng timeout ƒë·ªÉ ph√π h·ª£p v·ªõi Colab test (60s + buffer)
                future = executor.submit(
                    call_with_backoff, 
                    messages, 
                    model="openchat/openchat_3.5",
                    max_tokens=1400, 
                    temperature=0.6
                )
                
                try:
                    # Timeout 90s cho to√†n b·ªô operation (bao g·ªìm retry)
                    resp = future.result(timeout=90)  
                    api_response_time = time.time() - start_time
                    
                    if resp:
                        logger.info(f"API call successful in {api_response_time:.2f}s")
                        
                        # Parse response gi·ªëng Colab
                        text = (resp.choices[0].message.content or "").strip()
                        logger.info(f"GPT response length: {len(text)}")
                        
                        if text:
                            # Parse lines
                            lines = [ln for ln in text.splitlines() if ln.strip()]
                            valid_lines = [ln for ln in lines if re.match(r"^Ng√†y\s+(\d{1,2})\s*[:\-‚Äì].+", ln)]
                            
                            logger.info(f"Lines: total={len(lines)}, valid='Ng√†y N'={len(valid_lines)}")
                            
                            # Parse days
                            for line in valid_lines:
                                try:
                                    day_match = re.search(r"Ng√†y\s+(\d{1,2})", line)
                                    if day_match:
                                        day_num = int(day_match.group(1))
                                        if 1 <= day_num <= 28:
                                            plan[day_num] = line
                                except Exception as e:
                                    logger.warning(f"Error parsing line: {line[:50]}... - {e}")
                                    continue
                            
                            logger.info(f"Successfully parsed {len(plan)} days from GPT response")
                            
                            # Check success threshold
                            if len(plan) >= 20:  # Accept if we got at least 20 days
                                ai_success = True
                                # Fill missing days with fallback
                                if len(plan) < 28:
                                    logger.info(f"Filling {28 - len(plan)} missing days with fallback")
                                    fallback_plan = generate_fallback_plan(class_level, subject, study_time, goal)
                                    for day in range(1, 29):
                                        if day not in plan:
                                            plan[day] = fallback_plan[day]
                            else:
                                logger.warning(f"Only got {len(plan)} days, using full fallback")
                        
                except FutureTimeoutError:
                    logger.error("API call timed out after 90 seconds")
                    future.cancel()
                    
        except Exception as e:
            logger.error(f"Error during API call: {str(e)}")
        
        # N·∫øu AI kh√¥ng th√†nh c√¥ng, d√πng fallback plan
        if not ai_success:
            logger.info(f"Using fallback plan (API response time: {api_response_time:.2f}s)")
            plan = generate_fallback_plan(class_level, subject, study_time, goal)
        
        # Save to DB
        user = request.user
        try:
            with transaction.atomic():
                deleted_count = ProgressLog.objects.filter(
                    user=user, 
                    subject=subject
                ).delete()[0]
                logger.info(f"Deleted {deleted_count} old progress logs")
                
                objs = []
                for day_number in sorted(plan.keys()):
                    task_text = str(plan[day_number])
                    week = (day_number - 1) // 7 + 1
                    objs.append(ProgressLog(
                        user=user,
                        subject=subject,
                        week=week,
                        day_number=day_number,
                        task_title=task_text,
                        status="pending",
                    ))
                
                created_logs = ProgressLog.objects.bulk_create(objs)
                logger.info(f"Created {len(created_logs)} new progress logs")
        except Exception as db_error:
            logger.error(f"Database error: {db_error}")
            return Response(
                {"error": "L·ªói l∆∞u d·ªØ li·ªáu v√†o database"}, 
                status=500
            )
        
        # Return success response
        logs = ProgressLog.objects.filter(
            user=user, 
            subject=subject
        ).order_by("week", "day_number")
        
        response_data = {
            "message": "‚úÖ ƒê√£ t·∫°o l·ªô tr√¨nh h·ªçc!",
            "subject": subject,
            "items": ProgressLogSerializer(logs, many=True).data,
            "ai_generated": ai_success,
            "response_time": f"{api_response_time:.2f}s" if api_response_time > 0 else "fallback",
        }
        
        return Response(response_data, status=201)
        
    except Exception as unexpected_error:
        logger.error(f"Unexpected error in generate_learning_path: {unexpected_error}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        return Response(
            {
                "error": "L·ªói kh√¥ng x√°c ƒë·ªãnh",
                "details": str(unexpected_error)[:200]
            },
            status=500
        )

# =========================================
# C√°c endpoints kh√°c gi·ªØ nguy√™n
# =========================================
@api_view(["GET"])
@permission_classes([IsAuthenticated])
def get_progress_list(request):
    try:
        subject = request.query_params.get("subject")
        user = request.user
        qs = ProgressLog.objects.filter(user=user).order_by("subject", "week", "day_number")
        if subject:
            qs = qs.filter(subject=subject)
        return Response(ProgressLogSerializer(qs, many=True).data, status=200)
    except Exception as e:
        logger.error(f"Error in get_progress_list: {e}")
        return Response({"error": "L·ªói l·∫•y danh s√°ch ti·∫øn ƒë·ªô"}, status=500)

@api_view(["POST"])
@permission_classes([IsAuthenticated])
def update_progress_status(request):
    try:
        log_id = request.data.get("id")
        new_status_raw = request.data.get("status")
        
        if not log_id or new_status_raw is None:
            return Response(
                {"error": "Thi·∫øu th√¥ng tin 'id' ho·∫∑c 'status'."}, 
                status=400
            )
        
        try:
            log = ProgressLog.objects.get(id=log_id, user=request.user)
        except ProgressLog.DoesNotExist:
            return Response(
                {"error": "Kh√¥ng t√¨m th·∫•y b·∫£n ghi c·ªßa b·∫°n"}, 
                status=404
            )
        
        log.status = normalize_status(new_status_raw)
        log.save(update_fields=["status"])
        
        return Response(
            {
                "message": "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!", 
                "item": ProgressLogSerializer(log).data
            },
            status=200,
        )
    except Exception as e:
        logger.error(f"Error in update_progress_status: {e}")
        return Response({"error": "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i"}, status=500)

# Auth endpoints
@api_view(["GET"])
@ensure_csrf_cookie
@permission_classes([AllowAny])
def get_csrf(request):
    return Response({"csrfToken": request.META.get("CSRF_COOKIE", "")})

@api_view(["POST"])
@permission_classes([AllowAny])
def register(request):
    serializer = RegisterSerializer(data=request.data)
    if serializer.is_valid():
        user = serializer.save()
        return Response(
            {
                "message": "ƒêƒÉng k√Ω th√†nh c√¥ng!", 
                "user": UserSerializer(user).data
            }, 
            status=201
        )
    return Response(serializer.errors, status=400)

@api_view(["POST"])
@permission_classes([AllowAny])
def login_view(request):
    username = request.data.get("username")
    password = request.data.get("password")
    user = authenticate(request, username=username, password=password)
    
    if not user:
        return Response(
            {"detail": "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u."}, 
            status=400
        )
    
    login(request, user)
    return Response(
        {
            "message": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", 
            "username": user.username
        }
    )

@api_view(["POST"])
@permission_classes([IsAuthenticated])
def logout_view(request):
    logout(request)
    return Response({"message": "ƒê√£ ƒëƒÉng xu·∫•t."})

@api_view(["GET"])
@permission_classes([AllowAny])
def whoami(request):
    if request.user.is_authenticated:
        return Response({"username": request.user.username})
    return Response({"username": None}, status=200)
